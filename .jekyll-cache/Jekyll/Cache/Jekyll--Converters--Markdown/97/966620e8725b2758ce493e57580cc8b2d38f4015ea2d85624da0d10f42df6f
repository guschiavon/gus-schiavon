I"+H<h2 id="responsive-gallery-with-vanilla-javascript-es6">Responsive Gallery with Vanilla JavaScript (ES6)</h2>

<h3 id="overview">Overview</h3>

<p>Nowadays it’s so easy to make use of existing tools and pre-written code to add features to our projects. The issue with these is the chance of conflicts and issues when it comes to implementations using code written by multiple collectives or individuals. In this post we will cover the step-by-step process to create a <strong>responsive image gallery using vanilla JavaScript</strong> and Jekyll SSG which is simple enough and gives us some good insights on how JS works on the browser.</p>

<p><strong>We will cover:</strong></p>
<ul>
  <li><a href="#responsive-gallery-with-vanilla-javascript-es6">Responsive Gallery with Vanilla JavaScript (ES6)</a>
    <ul>
      <li><a href="#overview">Overview</a></li>
      <li><a href="#the-result">The result:</a></li>
      <li><a href="#setup">Setup</a></li>
      <li><a href="#how-to-create-a-jekyll-image-gallery-using-html--css">How to create a Jekyll Image Gallery using HTML &amp; CSS</a>
        <ul>
          <li><a href="#the-html">The HTML</a></li>
          <li><a href="#the-css">The CSS</a></li>
          <li><a href="#the-javascript">The JavaScript</a></li>
        </ul>
      </li>
      <li><a href="#troubleshooting">Troubleshooting</a></li>
    </ul>
  </li>
</ul>

<h3 id="the-result">The result:</h3>

<h3 id="setup">Setup</h3>

<p>This tutorial assumes you have <a href="https://jekyllrb.com/" target="_blank" rel="noreferrer">Jekyll</a> installed on your system and that you are familiar with this library and <a href="https://shopify.github.io/" target="_blank" rel="noreferrer">Liquid syntax</a>.</p>

<p>We should also add <a href="https://gridlex.devlint.fr/" target="_blank" rel="noreferrer">Gridlex CSS flexbox library</a> to the <code class="language-plaintext highlighter-rouge">head</code> tag of our main Jekyll layout (<code class="language-plaintext highlighter-rouge">default.html</code> layout or whichever is the one you are using). Copy the below snippet or head to <a href="https://gridlex.devlint.fr/" target="_blank" rel="noreferrer">Gridlex’s site</a> to get the latest version:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/gridlex/2.7.1/gridlex.min.css"&gt;
</code></pre></div></div>

<h3 id="how-to-create-a-jekyll-image-gallery-using-html--css">How to create a Jekyll Image Gallery using HTML &amp; CSS</h3>
<h4 id="the-html">The HTML</h4>

<p>We’ll go step-by-step so we can check the layout is working before iterating over the <code class="language-plaintext highlighter-rouge">YAML</code> array. Let’s start by adding some <code class="language-plaintext highlighter-rouge">HTML</code> to our page:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
---
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="UTF-8"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
  &lt;title&gt;Document&lt;/title&gt;
  &lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/gridlex/2.7.1/gridlex.min.css"&gt;
  &lt;link rel="stylesheet" href="/main.css"&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;section class="listing-gallery"&gt;
  &lt;div class="grid-noGutter"&gt;
    &lt;div class="col-12 listing-gallery-img-lg"&gt;
      &lt;img id="active-img" src="/your-placeholder-image-url-here.jpg" alt="A description of the image" class="responsive-img"&gt;
    &lt;/div&gt;
    &lt;div class="col-12 grid-noGutter"&gt;
      &lt;div class="col-3_md-4_sm-6 listing-gallery-img-sm"&gt;
        &lt;img src="/your-placeholder-image-url-here.jpg" alt="A description of the image" class="listing-gallery-img responsive-img"&gt;
      &lt;/div&gt;      
      &lt;div class="col-3_md-4_sm-6 listing-gallery-img-sm"&gt;
        &lt;img src="/your-placeholder-image-url-here.jpg" alt="A description of the image" class="listing-gallery-img responsive-img"&gt;
      &lt;/div&gt;      
      &lt;div class="col-3_md-4_sm-6 listing-gallery-img-sm"&gt;
        &lt;img src="/your-placeholder-image-url-here.jpg" alt="A description of the image" class="listing-gallery-img responsive-img"&gt;
      &lt;/div&gt;      
      &lt;div class="col-3_md-4_sm-6 listing-gallery-img-sm"&gt;
        &lt;img src="/your-placeholder-image-url-here.jpg" alt="A description of the image" class="listing-gallery-img responsive-img"&gt;
      &lt;/div&gt;      
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt; 

&lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>
<blockquote>
  <p>What we got here is: a <code class="language-plaintext highlighter-rouge">section</code> which serves as the container for the gallery; by leveraging Gridlex, we then create a flexbox grid using the <code class="language-plaintext highlighter-rouge">grid-noGutter</code> class. The first image is a larger image, which we have given an <code class="language-plaintext highlighter-rouge">id="active-img</code> and a class of <code class="language-plaintext highlighter-rouge">listing-gallery-img-lg</code>. This is wrapped in a <code class="language-plaintext highlighter-rouge">col-12</code> class, which Gridlex understands as a <strong>full-width container</strong> inside the <code class="language-plaintext highlighter-rouge">grid-noGutter</code> container. Directly below it, we have another full-width container (<code class="language-plaintext highlighter-rouge">col-12</code>) which <strong>is also a <code class="language-plaintext highlighter-rouge">grid-noGutter</code></strong>. The children of this new grid are smaller images (thumbnails if we may), which all take Gridlex’s <code class="language-plaintext highlighter-rouge">col-3_md-4_sm-6</code> class (each image takes 3 columns on large screens, 4 columns on mid-width screens and 6 columns on small screens and below, all relative to the grid’s full width).</p>
</blockquote>

<p>We should now have one large image and 4 small thumbnails (previews) below it. Once this is true, we can refactor the code using Liquid tags to iterate over the frontmatter array, like so:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html">---
gallery:
  - image: /assets/images/image-1.jpg
    alt_text: Some alt text
  - image: /assets/images/image-2.jpg
    alt_text: Some alt text
  - image: /assets/images/image-3.jpg
    alt_text: Some alt text
  - image: /assets/images/image-4.jpg
    alt_text: Some alt text
---
<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"https://cdnjs.cloudflare.com/ajax/libs/gridlex/2.7.1/gridlex.min.css"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"/main.css"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    
    <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"listing-gallery"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid-noGutter"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-12 listing-gallery-img-lg"</span><span class="nt">&gt;</span>
          {% for img in page.gallery %}
          {% if forloop.first %}
            <span class="nt">&lt;img</span> <span class="na">id=</span><span class="s">"active-img"</span> <span class="na">src=</span><span class="s">"{{img.image}}"</span> <span class="na">alt=</span><span class="s">"{{img.alt_text}}"</span> <span class="na">class=</span><span class="s">"responsive-img"</span><span class="nt">&gt;</span>
          {% endif %}
          {% endfor %}
        <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-12 grid-noGutter"</span><span class="nt">&gt;</span>
          {% for img in page.gallery %}
          <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-3_md-4_sm-6 listing-gallery-img-sm"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"{{img.image}}"</span> <span class="na">alt=</span><span class="s">"{{img.alt_text}}"</span> <span class="na">class=</span><span class="s">"listing-gallery-img responsive-img"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;/div&gt;</span>
          {% endfor %}
        <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/section&gt;</span> 
    
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span></code></pre></figure>

<blockquote>
  <p>By using the <code class="language-plaintext highlighter-rouge">forloop</code> statement we can refactor the code to iterate over the content of the page’s <code class="language-plaintext highlighter-rouge">gallery</code> array, making the code more maintainable. Note the <code class="language-plaintext highlighter-rouge">if</code> statement on the large image block: that will output the first image of the <code class="language-plaintext highlighter-rouge">gallery</code> array.</p>
</blockquote>

<h4 id="the-css">The CSS</h4>

<p>Now that the markup is ready, we will write some CSS to make it look nice.</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="o">//</span> <span class="nt">Gallery</span>
<span class="nf">#active-img</span> <span class="p">{</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.listing-gallery</span> <span class="nt">img</span> <span class="p">{</span>
  <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.listing-gallery-img-lg</span><span class="o">,</span>
<span class="nc">.listing-gallery-img-sm</span> <span class="p">{</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">5px</span> <span class="nb">solid</span> <span class="no">white</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.listing-gallery-img-lg</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">600px</span><span class="p">;</span>
  <span class="nl">overflow</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.listing-gallery-img-sm</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
  <span class="nl">overflow</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.listing-gallery-img</span> <span class="p">{</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.6</span><span class="p">;</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="m">0.2s</span> <span class="n">all</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.listing-gallery-img.selected</span> <span class="p">{</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="m">0.2s</span> <span class="n">all</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.responsive-img</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="nl">object-fit</span><span class="p">:</span> <span class="n">cover</span><span class="p">;</span>
  <span class="nl">object-position</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<blockquote>
  <p>Pretty simple CSS uses, with the <code class="language-plaintext highlighter-rouge">#active-img</code> selector for the active image (the large image) and the <code class="language-plaintext highlighter-rouge">responsive-img</code> class using the <code class="language-plaintext highlighter-rouge">object-fit</code> property to make the image respond as a background image (keeping aspect ratio). The <code class="language-plaintext highlighter-rouge">.selected</code> class will be added via JavaScript</p>
</blockquote>

<h4 id="the-javascript">The JavaScript</h4>

<p>Now for the fun part: using Vanilla JavaScript to implement the gallery functionality.</p>

<p><strong>First:</strong></p>

<ul>
  <li>Create a <code class="language-plaintext highlighter-rouge">/js</code> folder in your project’s root directory, and add a <code class="language-plaintext highlighter-rouge">gallery.js</code> file inside it.</li>
  <li>Reference this file by adding the following script tag to the document’s head: <code class="language-plaintext highlighter-rouge">&lt;script src="/js/gallery.js" type="text/javascript"&gt;&lt;/script&gt;</code></li>
</ul>

<p>Then we write the JS on the <code class="language-plaintext highlighter-rouge">gallery.js</code> file like this:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// selects all elements with the listing-gallery-img class</span>
<span class="kd">const</span> <span class="nx">images</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">.listing-gallery-img</span><span class="dl">"</span><span class="p">);</span> 
<span class="c1">// the active (main) image container</span>
<span class="kd">const</span> <span class="nx">activeImage</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">active-img</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// selects the first image inside the images array (the collection of elements with the .listing-gallery-img class)</span>
<span class="kd">const</span> <span class="nx">firstImage</span> <span class="o">=</span> <span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="c1">// adds the 'selected' class to the first image of the array so it's not faded (see CSS)</span>
<span class="nx">firstImage</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">selected</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// We use a JavaScript 'forloop' to iterate over the 'images' array</span>
<span class="nx">images</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">image</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// for each image, listen for a 'click' on it:</span>
  <span class="nx">image</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// remove the 'selected' class from each image in the 'images' array</span>
    <span class="nx">images</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">image</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">image</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="dl">"</span><span class="s2">selected</span><span class="dl">"</span><span class="p">));</span> 
    <span class="c1">// add the 'selected' class to the image which was clicked</span>
    <span class="nx">image</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">selected</span><span class="dl">"</span><span class="p">);</span> 
    <span class="c1">// check the source attribute value for the image which was clicked</span>
    <span class="kd">const</span> <span class="nx">thumbSrc</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">src</span><span class="p">;</span>
    <span class="c1">// change the value of the active image 'src' attribute to match that of the image clicked</span>
    <span class="nx">activeImage</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">thumbSrc</span><span class="p">;</span> 
  <span class="p">});</span>
<span class="p">});</span></code></pre></figure>

<p>That’s it! You should now have a working Vanilla JavaScript responsive gallery</p>

<h3 id="troubleshooting">Troubleshooting</h3>

:ET