I"5<p>Creating a Vanilla JavaScript (no jQuery), GDPR-compliant cookie banner was a great opportunity to put my JS skills to practice; thanks to <a href="https://www.udemy.com/course/modern-javascript/" target="_blank" rel="noopener noreferrer">Andrew Mead’s ‘The Modern JavaScript Bootcamp</a>’ on Udemy, my knowledge of this incredible language and its capabilities has increase exponentially.</p>

<h3 id="tldr">TL;DR</h3>

<p>The complete GDPR cookie banner &amp; script can be found on <a href="https://codepen.io/gschiavon/pen/wvoWZwB" target="_blank" rel="noopener noreferrer">this pen</a>. Adaptation might be needed to suit your design and data protection. The preferences are session-unique, meaning the cookie preferences are stored in the <code class="language-plaintext highlighter-rouge">sessionStorage</code> of the client and erased once the tab is closed.</p>

<h3 id="overview">Overview</h3>

<p>Creating a GDPR-compliant vanilla JavaScript cookie banner requires a few things according to the GDPR European Union legislation:</p>

<ol>
  <li>Cookies (any of them) can only be set by user consent; they cannot be previously checked or active prior to user giving consent.</li>
  <li>Cookie preferences must always be requested to the user, on each page visited</li>
  <li>Cookies can only be stored for the duration of the session.</li>
</ol>

<h3 id="the-html">The HTML</h3>

<p>The cookie banner HTML structure is pretty straight forward: a fixed banner (or pop-up, whichever you prefer) with some information about cookies and a couple of choices for the user. I’ve opted to add a paragraph and a couple of buttons for accessibility:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

&lt;section id="cookies-banner" class="cookies-banner bg-dark px-lg"&gt;
  &lt;h4&gt;We use cookies in this page&lt;/h4&gt;
  &lt;p class="editable txt-small"&gt;Explain here what are cookies and all&lt;/p&gt;
  &lt;button id="cookie-consent" class="btn txt-small" tabindex="1"&gt;
    Accept All Cookies
  &lt;/button&gt;
  &lt;button id="cookie-preferences" class="btn-outline--light txt-small" tabindex="1"&gt;
    Settings    
  &lt;/button&gt;
  &lt;div id="cookie-preferences--menu" class="hide"&gt;
    &lt;p class="txt-small"&gt;Choose which cookies you want to allow and click "Save &amp; Close" to save your preferences&lt;/p&gt;
    &lt;p class="txt-bold txt-small"&gt;Allow cookies:&lt;/p&gt;
    &lt;input type="checkbox" name="Strictly Necessary" id="strictly-necessary" checked&gt;
    &lt;label for="strictly-necessary" class="txt-small"&gt;Strictly Necessary&lt;/label&gt;
    &lt;input type="checkbox" name="Analytics" id="analytics"&gt;
    &lt;label for="analytics" class="txt-small"&gt;Analytics&lt;/label&gt;
    &lt;input type="checkbox" name="Marketing" id="marketing"&gt;
    &lt;label for="analytics" class="txt-small"&gt;Marketing&lt;/label&gt;
  &lt;/div&gt;
&lt;/section&gt;
&lt;button id="cookie-prefs" class="cookie-prefs flex-center" aria-label="open cookie preferences"&gt;
  &lt;img src="https://upload.wikimedia.org/wikipedia/commons/6/6d/Windows_Settings_app_icon.png" alt=""&gt;
&lt;/button&gt;
&lt;div id="scripts"&gt;&lt;/div&gt;

</code></pre></div></div>

<h3 id="the-css">The CSS</h3>

<p>Pretty straight forward styles for this, just so we can see it work. Notice the utility class <code class="language-plaintext highlighter-rouge">hide</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
body {
  font-family: Arial, sans-serif;
}
.overview {
  width: 80%;
  height: 50vh;
  margin: auto;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.cookies-banner {
  position: fixed;
  bottom:0;
  left: 0;
  width: 100%;
  height: auto;
 
}
.btn,
  [class*=btn-outline] {
    padding: 0.5rem;
  }
.btn-outline {
  color         : whitesmoke;
  border-color  : inherit;
}
.cookie-prefs {
  position: fixed;
  bottom: 1.5rem;
  left: 1.5rem;
  background-color: $light-color;
  box-shadow: 0 3px 5px rgba(103, 103, 103, 0.605);
  height: 45px;
  width: 45px;
  border-radius: 50%;
  transform: rotate(-90deg);
  z-index: -1;
}
button img {
  width: 24px;
}
.hide {
  display: none;
}

.px-lg {
  padding: 2rem;
}

.bg-dark {
  background-color: #888;
}

</code></pre></div></div>

<h3 id="the-javascript">The JavaScript</h3>

<p>Here’s where the fun begins: we will use Vanilla JavaScript (no jQuery) to perform the following:</p>

<ul>
  <li>Set cookies according to user preferences</li>
  <li>Allow users to review their cookie preferences and update the scripts accordingly at any point</li>
  <li>Remember user preferences during the session to prevent annoying cookie banner pop-ups (warning: NOT 100% GDPR-EU COMPLIANT!)</li>
</ul>

<p>The preferences are session-unique, meaning the cookie preferences are stored in the <code class="language-plaintext highlighter-rouge">sessionStorage</code> of the client and erased once the tab is closed. I’ve opted for sessionStorage as it is merely a client-side function.</p>

<h4 id="variables">Variables</h4>

<p>First, we need to establish the variables:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
// Cookie banner
// Variables &amp; Constants
const cookiePrefs = document.getElementById("cookie-preferences");
const toggleCookiePrefs = document.getElementById("cookie-prefs");
const cookieBanner = document.getElementById("cookies-banner");
const cookieChoices = document.getElementById("cookie-preferences--menu");
const cookieConsent = document.getElementById("cookie-consent");
const scripts = document.getElementById("scripts");
const strictConsent = document.getElementById("strictly-necessary");
const analyticsConsent = document.getElementById("analytics");
const marketingConsent = document.getElementById("marketing");
let savedPrefs = sessionStorage.getItem("consents");

// function to create DOM element

const cookies = [
  {
    type: "strictly-necessary",
    path: [],
  },
  {
    type: "analytics",
    path: [],
  },
  {
    type: "marketing",
    path: [],
  },
];

// Set cookies that have the same data-cookie-type than data-consent-type
const checkboxes = cookieChoices.querySelectorAll("input");

// For banner preferences
let clicks = 0;

</code></pre></div></div>

<p>Here we have established a few variables to be called at a later stage. The <code class="language-plaintext highlighter-rouge">cookies</code> variable is the array where we will define our cookies; should you have more than 3 <strong>types</strong> of cookies, you should update this array with a new object, and also create a <strong>new variable</strong> (or constant) named <code class="language-plaintext highlighter-rouge">yourNewTypeConsent</code>, where <code class="language-plaintext highlighter-rouge">yourNewType</code> is the type of cookie you want to set up. You’ll also need to <strong>add a new checkbox on the HTML</strong>.</p>

<p>The <code class="language-plaintext highlighter-rouge">path</code> key presents an array where you should set your scripts <code class="language-plaintext highlighter-rouge">src</code> attribute value, <strong>as a string</strong>, and separated by comma.</p>

<h4 id="callback-functions">Callback Functions</h4>

<p>Now we will create callback functions to be executed later in the logic. Here they are:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

// **** Callback functions ****

/* create element */
const createEl = function (p, t) {
  const el = document.createElement("script");
  const att = document.createAttribute("data-cookie-type");
  const src = document.createAttribute("src");
  src.value = p;
  att.value = t;
  el.setAttributeNode(att);
  el.setAttributeNode(src);
  return scripts.appendChild(el);
};

/* Set cookies according to preferences with the cookies array */
function setCookie(arr, type) {
  arr.forEach(function (obj) {
    if (obj.type === type) {
      let paths = obj.path;
      paths.forEach(function (path) {
        createEl(path, type);
      });
    };
  });
};

/* check preferences */
function checkPrefs(checkbox) {
  if (checkbox.checked) {
    let type = checkbox.dataset.consentType;
    let index = consents.indexOf(type);
    if (index === -1) {
      consents.push(type);
      sessionStorage.clear();
      sessionStorage.setItem("consents", consents);
    }
  } else if (!checkbox.checked) {
    let type = checkbox.dataset.consentType;
    let index = consents.indexOf(type);
    if (index !== -1) {
      consents.splice(index, 1);
      sessionStorage.clear();
      sessionStorage.setItem("consents", consents);
    }
  }
}


</code></pre></div></div>

<p>Let’s go one-by-one:</p>

<p>1. Create element</p>

<p>This function will manipulate the DOM and inject a <code class="language-plaintext highlighter-rouge">&lt;script&gt;</code> tag inside a container (<code class="language-plaintext highlighter-rouge">&lt;div id="scripts"&gt;</code>) with their respective attributes passed on (<code class="language-plaintext highlighter-rouge">src</code> and <code class="language-plaintext highlighter-rouge">data-cookie-type</code>).</p>

<p>2. Set Cookies</p>

<p>This function will check how many iterations of the <code class="language-plaintext highlighter-rouge">createEl()</code> function; for example, if the cookie type <code class="language-plaintext highlighter-rouge">marketing</code> has 3 <code class="language-plaintext highlighter-rouge">paths</code>, then it will create an element with the path and inject in the DOM.</p>

<p>3. Check Preferences</p>

<p>This callback checks the user preferences and updates the sessionStorage according to the user’s choices. It will:</p>

<p>- check which of the checkboxes have been ticked<br />- clear the session storage before setting the preferences<br />- set the preferences on sessionStorage</p>

<h3 id="adding-the-logic">Adding the logic</h3>

<p>Now let’s add the JavaScript logic behind setting the cookies:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
// displays the cookie banner on click
toggleCookiesPrefs.addEventListener('click', function () {
  cookieBanner.classList.remove('hide')
})

// We create an empty array to store the preferences, as strings 
let consents = []

// Creates an array from the scripts that are currently in the DOM
let activeScripts = scripts.children;

// Preferences

// Remember session preferences
if (savedPrefs) {  
  cookieBanner.classList.add('hide')
  let preferences = sessionStorage.getItem("consents").split(",");
  preferences.forEach(function (type) {
    setCookie(cookies, type);
  });
} else if (!savedPrefs) {  
  cookieBanner.classList.remove('hide')
}

// Logic
cookiePrefs.addEventListener("click", function () {
  // increases the clicks by 1 when clicked
  clicks++;
  // checks if the clicks are odd
  isOdd = (clicks) =&gt; {clicks % 2 == 1}
  // If clicks are odd, then update button text content and display the cookie choices
  if (isOdd(clicks)) {
    this.textContent = "Save and Close";
    cookieChoices.classList.remove("hide");
    // When clicking on the "Save &amp; Close" button, clear the container innerHTML, check which checkboxes are checked and then set the cookies inside the container, reset the click count
    this.addEventListener("click", function () {
      scripts.innerHTML = ''
      // Checks the consent status and updates the sessionStorage
      checkboxes.forEach(function (checkbox) {
        checkPrefs(checkbox)       
      });
      // checks which cookies are being allowed and then sets the script inside the 'id="scripts"' tag
      let preferences = sessionStorage.getItem('consents').split(',')
      preferences.forEach(function(type){
        setCookie(cookies, type)
      })
      // zeros the clicks
      let clicks = 0
    });
  } else if ((clicks === 0)) {
    this.textContent = "Configure";
  } else {
    this.textContent = "Configure";
    cookieBanner.classList.add("hide");
    cookieChoices.classList.add("hide");
  }
});

// Consent to all cookies
cookieConsent.addEventListener("click", function () {
  let consents = []
  scripts.innerHTML = "";
  cookies.forEach(function (cookie) {
    const cPaths = cookie.path;
    const cType = cookie.type;
    for (let i = 0; i &lt; cPaths.length; i++) {
      createEl(cPaths[i], cType);
    }
    consents.push(cType);
  });
  sessionStorage.setItem('consents', consents);
  cookieBanner.classList.add('hide');
});


</code></pre></div></div>

<p>Note that we clear the consents array and the <code class="language-plaintext highlighter-rouge">innerHTML</code> of the <code class="language-plaintext highlighter-rouge">&lt;scripts id="scripts"&gt;</code> tag whenever new preferences are passed; this way we ensure only the allowed cookies are set.</p>

<h3 id="fully-gdpr-compliant">Fully GDPR-compliant</h3>

<p>If you want to make it fully GDPR compliant, then remove the conditional logic which checks for <code class="language-plaintext highlighter-rouge">savedPrefs</code>; this way the cookie banner will pop up in every single page despite the user’s choices.</p>

<p>What do you think? Would you do it any differently? How can I improve this? You can check <a href="https://codepen.io/gschiavon/pen/wvoWZwB" target="_blank" rel="noopener noreferrer">this pen</a> for the full working example.</p>
:ET